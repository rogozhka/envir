// Code generated by MockGen. DO NOT EDIT.
// Source: required-lookup.go
//
// Generated by this command:
//
//	mockgen -source=required-lookup.go -destination=mocks/required-lookup_generated.go -mock_names lookupInterface=MockLookupInterface -typed -package=mocks lookupInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLookupInterface is a mock of lookupInterface interface.
type MockLookupInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLookupInterfaceMockRecorder
	isgomock struct{}
}

// MockLookupInterfaceMockRecorder is the mock recorder for MockLookupInterface.
type MockLookupInterfaceMockRecorder struct {
	mock *MockLookupInterface
}

// NewMockLookupInterface creates a new mock instance.
func NewMockLookupInterface(ctrl *gomock.Controller) *MockLookupInterface {
	mock := &MockLookupInterface{ctrl: ctrl}
	mock.recorder = &MockLookupInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLookupInterface) EXPECT() *MockLookupInterfaceMockRecorder {
	return m.recorder
}

// LookupEnv mocks base method.
func (m *MockLookupInterface) LookupEnv(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupEnv", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupEnv indicates an expected call of LookupEnv.
func (mr *MockLookupInterfaceMockRecorder) LookupEnv(key any) *MockLookupInterfaceLookupEnvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupEnv", reflect.TypeOf((*MockLookupInterface)(nil).LookupEnv), key)
	return &MockLookupInterfaceLookupEnvCall{Call: call}
}

// MockLookupInterfaceLookupEnvCall wrap *gomock.Call
type MockLookupInterfaceLookupEnvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLookupInterfaceLookupEnvCall) Return(arg0 string, arg1 bool) *MockLookupInterfaceLookupEnvCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLookupInterfaceLookupEnvCall) Do(f func(string) (string, bool)) *MockLookupInterfaceLookupEnvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLookupInterfaceLookupEnvCall) DoAndReturn(f func(string) (string, bool)) *MockLookupInterfaceLookupEnvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
