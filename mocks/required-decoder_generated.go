// Code generated by MockGen. DO NOT EDIT.
// Source: required-decoder.go
//
// Generated by this command:
//
//	mockgen -source=required-decoder.go -destination=mocks/required-decoder_generated.go -mock_names decoderInterface=MockDecoderInterface -typed -package=mocks decoderInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDecoderInterface is a mock of decoderInterface interface.
type MockDecoderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderInterfaceMockRecorder
	isgomock struct{}
}

// MockDecoderInterfaceMockRecorder is the mock recorder for MockDecoderInterface.
type MockDecoderInterfaceMockRecorder struct {
	mock *MockDecoderInterface
}

// NewMockDecoderInterface creates a new mock instance.
func NewMockDecoderInterface(ctrl *gomock.Controller) *MockDecoderInterface {
	mock := &MockDecoderInterface{ctrl: ctrl}
	mock.recorder = &MockDecoderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoderInterface) EXPECT() *MockDecoderInterfaceMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockDecoderInterface) Decode(arg0 []byte, arg1 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockDecoderInterfaceMockRecorder) Decode(arg0, arg1 any) *MockDecoderInterfaceDecodeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockDecoderInterface)(nil).Decode), arg0, arg1)
	return &MockDecoderInterfaceDecodeCall{Call: call}
}

// MockDecoderInterfaceDecodeCall wrap *gomock.Call
type MockDecoderInterfaceDecodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDecoderInterfaceDecodeCall) Return(arg0 error) *MockDecoderInterfaceDecodeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDecoderInterfaceDecodeCall) Do(f func([]byte, map[string]any) error) *MockDecoderInterfaceDecodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDecoderInterfaceDecodeCall) DoAndReturn(f func([]byte, map[string]any) error) *MockDecoderInterfaceDecodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
