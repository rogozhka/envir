// Code generated by MockGen. DO NOT EDIT.
// Source: required-expander.go
//
// Generated by this command:
//
//	mockgen -source=required-expander.go -destination=mocks/required-expander_generated.go -mock_names expanderInterface=MockExpanderInterface -typed -package=mocks expanderInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExpanderInterface is a mock of expanderInterface interface.
type MockExpanderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExpanderInterfaceMockRecorder
	isgomock struct{}
}

// MockExpanderInterfaceMockRecorder is the mock recorder for MockExpanderInterface.
type MockExpanderInterfaceMockRecorder struct {
	mock *MockExpanderInterface
}

// NewMockExpanderInterface creates a new mock instance.
func NewMockExpanderInterface(ctrl *gomock.Controller) *MockExpanderInterface {
	mock := &MockExpanderInterface{ctrl: ctrl}
	mock.recorder = &MockExpanderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpanderInterface) EXPECT() *MockExpanderInterfaceMockRecorder {
	return m.recorder
}

// Expand mocks base method.
func (m *MockExpanderInterface) Expand(value string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expand", value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expand indicates an expected call of Expand.
func (mr *MockExpanderInterfaceMockRecorder) Expand(value any) *MockExpanderInterfaceExpandCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expand", reflect.TypeOf((*MockExpanderInterface)(nil).Expand), value)
	return &MockExpanderInterfaceExpandCall{Call: call}
}

// MockExpanderInterfaceExpandCall wrap *gomock.Call
type MockExpanderInterfaceExpandCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExpanderInterfaceExpandCall) Return(arg0 string, arg1 error) *MockExpanderInterfaceExpandCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExpanderInterfaceExpandCall) Do(f func(string) (string, error)) *MockExpanderInterfaceExpandCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExpanderInterfaceExpandCall) DoAndReturn(f func(string) (string, error)) *MockExpanderInterfaceExpandCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
